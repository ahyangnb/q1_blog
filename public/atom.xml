<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>q1-flutter&#39;s blog</title>
  
  <subtitle>flutter分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://q1.flutterj.com/"/>
  <updated>2020-04-18T07:36:25.178Z</updated>
  <id>http://q1.flutterj.com/</id>
  
  <author>
    <name>q1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>轻量便捷路由管理方案NavRouter</title>
    <link href="http://q1.flutterj.com/2020/04/18/%E8%BD%BB%E9%87%8F%E4%BE%BF%E6%8D%B7%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88NavRouter/"/>
    <id>http://q1.flutterj.com/2020/04/18/%E8%BD%BB%E9%87%8F%E4%BE%BF%E6%8D%B7%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88NavRouter/</id>
    <published>2020-04-18T07:31:38.000Z</published>
    <updated>2020-04-18T07:36:25.178Z</updated>
    
    <content type="html"><![CDATA[<p>【本文待优化】</p><p>大家好，我是CrazyQ1，今天给大家推荐一个路由管理方案，用的非常不错的，叫nav_router。</p><p>项目地址是：<a href="https://github.com/fluttercandies/nav_router" target="_blank" rel="noopener">https://github.com/fluttercandies/nav_router</a></p><p>这篇文章主要是来介绍这个东西的使用。</p><p>nav_router是flutter最简单/轻量/便捷的路由管理方案，支持各种路由动画，跳转/传参起来非常方便，跳转新页面只需：routePush(NewPage());</p><p><strong>开始使用</strong></p><p><strong>添加依赖</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">dependencies:</span></span><br><span class="line"><span class="symbol">  nav_router:</span> any <span class="meta">#具体版本自定义（any表示最新）</span></span><br></pre></td></tr></table></figure><p>然后使用 flutter packages upgrade 来更新flutter的插件包</p><p>在项目的example里面有示例项目，可以直接去运行并参考代码。</p><p>下面来说一下相关配置和使用。</p><p><strong>配置</strong></p><p>1.在<code>MaterialApp</code>的页面先导入我们的插件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'package:nav_router/nav_router.dart';</span></span><br></pre></td></tr></table></figure><p>2.在<code>MaterialApp</code>的<code>navigatorKey</code>属性写上<code>navGK</code>值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Widget</span> <span class="selector-tag">build</span>(BuildContext context) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">MaterialApp</span>(</span><br><span class="line">      <span class="attribute">title</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="attribute">navigatorKey</span>: navGK,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3.然后，我们就可以开始使用啦，下面是一个跳转页面的例子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget buildItem(RouteModel item) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FlatButton(</span><br><span class="line">    onPressed: <span class="function"><span class="params">()</span> =&gt;</span> routePush(<span class="keyword">new</span> NewPage()),</span><br><span class="line">    child: <span class="keyword">new</span> <span class="built_in">Text</span>(<span class="string">'点击跳转'</span>),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.如果我们想用其他路由动画跳转可以在后面添加跳转属性,比如：渐变动画</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route<span class="constructor">Push(<span class="params">new</span> NewPage()</span>, <span class="module-access"><span class="module"><span class="identifier">RouterType</span>.</span></span>fade);</span><br></pre></td></tr></table></figure><p>然后我们来看看这个怎么方便的传递参数和接收并使用。</p><p><strong>传递参数</strong></p><p>这里主要讲两个方式来传输，具体的大家可以自己去研究下。</p><p><strong>方式1</strong></p><p>正常push新页面，但是在后面加上Then，后面的v就是我们跳转之后的页面带回来的数据，然后我们给它打印出来</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">routePush</span>(<span class="title">NewPage</span>()).then((<span class="variable">v</span>) &#123;</span></span><br><span class="line"><span class="function">  <span class="title">print</span>(<span class="string">'I received::$v'</span>);</span></span><br><span class="line"><span class="function">&#125;);</span></span><br></pre></td></tr></table></figure><p>那么我们新页面就要pop返回值了，直接在pop然后括号里加上我们的参数，可以是任何类型的参数值，之后上面写的东西就能接收到我们这次返回并带过去的参数了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">FlatButton</span>(</span><br><span class="line">  <span class="attribute">onPressed</span>: () &#123;</span><br><span class="line">    <span class="selector-tag">pop</span>(<span class="string">'This is the parameter'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="selector-tag">child</span>: <span class="selector-tag">Text</span>(<span class="string">'Return with parameters'</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><strong>方式2</strong></p><p>方式二可以用我们的NavData，先在我们要push到的页面添加NavData类型的参数接收,</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPage</span> <span class="keyword">extends</span> <span class="title">StatlessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">NavData</span> navData;</span><br><span class="line"></span><br><span class="line">  <span class="type">NewPage</span>(&#123;<span class="keyword">this</span>.navData&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后下面就判断这个navData是否为空，也就是上级是否有接收这个方法，如果有的话就带参数返回。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">FlatButton</span>(</span><br><span class="line">  <span class="attribute">onPressed</span>: () &#123;</span><br><span class="line">    <span class="selector-tag">if</span>(navData == null) <span class="selector-tag">return</span>;</span><br><span class="line">    <span class="selector-tag">widget</span><span class="selector-class">.navData</span>(<span class="string">'NavData mode parameter transmission'</span>);</span><br><span class="line">    <span class="selector-tag">pop</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="selector-tag">child</span>: <span class="selector-tag">Text</span>(<span class="string">'Return with parameters'</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>那么我们push的那个地方就可以用navData来接收值并且打印出来了。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">routePush(<span class="name">NewPage</span>(<span class="name">navData</span>: (<span class="name">v</span>) &#123;</span><br><span class="line">    print('I received::$v')<span class="comment">;</span></span><br><span class="line">  &#125;),</span><br><span class="line">)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>示例效果图</strong></p><p><a href="http://www.flutterj.com/content/uploadfile/201912/b5e91576074142.gif" target="_blank" rel="noopener"><img src="https://upload-images.jianshu.io/upload_images/14347887-58a599a65489ca81.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击查看原图"></a> </p><p>具体可以去项目里面查看。</p><p>这里我推荐个FLutter学习群，分别有微信群和QQ群</p><p><img src="https://upload-images.jianshu.io/upload_images/14347887-4f430b9284039cf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Flutter教程网：<a href="http://www.flutterj.com/" target="_blank" rel="noopener">www.flutterj.com</a></p><p>Flutter交流QQ群：<a href="https://jq.qq.com/?_wv=1027&k=5coTYqE" target="_blank" rel="noopener">874592746</a></p><p>然后贴上我们的公众号“Flutter前线”</p><p>关注公众号“<code>Flutter前线</code>”，各种Flutter项目实战经验技巧，干活知识，Flutter面试题答案，等你来领取。</p><p><img src="https://upload-images.jianshu.io/upload_images/14347887-09a59c358aceebf1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【本文待优化】&lt;/p&gt;
&lt;p&gt;大家好，我是CrazyQ1，今天给大家推荐一个路由管理方案，用的非常不错的，叫nav_router。&lt;/p&gt;
&lt;p&gt;项目地址是：&lt;a href=&quot;https://github.com/fluttercandies/nav_router&quot; tar
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用NestedScrollView必须知道的坑</title>
    <link href="http://q1.flutterj.com/2020/04/18/%E7%94%A8NestedScrollView%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%9D%91/"/>
    <id>http://q1.flutterj.com/2020/04/18/%E7%94%A8NestedScrollView%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%9D%91/</id>
    <published>2020-04-18T07:28:46.000Z</published>
    <updated>2020-04-18T07:36:04.060Z</updated>
    
    <content type="html"><![CDATA[<p>【本文待优化】</p><p>做企业项目遇到了个坑，</p><p>那这个坑是怎么遇到的呢，刚开始是已经做好了商品详情页：</p><p>详情页面用的是NestedScrollView组件，轮播图那一块用的是SliverAppBar，</p><p>也就是写在NestedScrollView的头部，然后下面的都是在身体部分了，</p><p>身体部分是可以滑动的，刚开始是没任何问题，正常滑动运行，</p><p>但是来了这个需求：</p><p>是在商品详情加个tabbar，然后我就加在SliverAppBar里面的bottom内个，</p><p>加上去显示也是没什么问题，但是锚点这个需求实现的时候就来了问题了。</p><p>大家都知道，想要锚点(jumpTo到指定位置)，嘚让他的body也加个控制器啊，</p><p>然后我就把之前给的滚动组件</p><p>new SingleChildScrollView(</p><p>  child: new Column(children: widget.widgets),</p><p>);</p><p>改成了</p><p>new ListView(children: widget.widgets);</p><p>虽然SingleChildScrollView也是可以加控制器并且jumpTo的，</p><p>但是我感觉用ListView比较舒服，代码也比较简洁，所以就用这个，</p><p>但是用哪个实现的效果都是差不多的。</p><p>然鹅</p><p>惊人的一幕就出现了。</p><p>NestedScrollView的头部内容完全固定，滑动body部分是不能控制到头部的，</p><p>但是滑动头部就是可以控制头部，</p><p>也就是头部和身体部分 分开了。</p><p>这是为什么呢？</p><p>因为NestedScrollView是有内外两个控制器的:</p><p>out控制header，inner控制body。只有当out不能滚动了才会滚动inner</p><p>body不写控制器就没事,写了就出现这种情况，</p><p>而且我去测试了下打印控制器最大滚动位置发现只有300左右，</p><p>也就是只能打印出头部的，</p><p>print(_C.position.maxScrollExtent);</p><p>那我要怎么去实现这个功能啊，只能在轮播图内跳来跳去，</p><p>难道是贫穷限制了我的想象吗？</p><p>头部固定解决方案：（不是唯一的）</p><p>既然都说了是有内外两个控制器那我们一定有办法来获取并使用他的内部控制器，</p><p>第一步：（尝试封装body为有状态类来从context中取到内控制器）</p><p>@override</p><p>  Widget build(BuildContext context) {</p><pre><code>return new Scaffold(  body: new NestedScrollView(      controller: _ctl,      headerSliverBuilder: _sliverBuilder,      body: new BodyView(widget.widgets, type)),);</code></pre><p>  }</p><p>BodyView就是我们封装的，</p><p>class BodyView extends StatefulWidget {</p><p>  final List<Widget> widgets;</p><p>  final int type;</p><p>  BodyView(this.widgets, this.type);</p><p>  @override</p><p>  _BodyViewState createState() =&gt; _BodyViewState();</p><p>}</p><p>class _BodyViewState extends State<BodyView> {</p><p>  @override</p><p>  Widget build(BuildContext context) {</p><pre><code>return new SingleChildScrollView(  child: new Column(children: widget.widgets),);</code></pre><p>  }</p><p>}</p><p>第二步：（type是干啥的先不用管）</p><p>class BodyView extends StatefulWidget {</p><p>  …</p><p>}</p><p>class _BodyViewState extends State<BodyView> {</p><p>  Type typeOf<T>() =&gt; T;</p><p>  ScrollController _innerC;</p><p>  @override</p><p>  void initState() {</p><pre><code>super.initState();PrimaryScrollController primaryScrollController =    context.ancestorWidgetOfExactType(typeOf&lt;PrimaryScrollController&gt;());_innerC = primaryScrollController.controller;</code></pre><p>  }</p><p>  @override</p><p>  Widget build(BuildContext context) {</p><pre><code>...</code></pre><p>  }</p><p>}</p><p>我们定义了一个类型和控制器，然后再初始化的时候写了一个主控制器，</p><p>主控制器的值是从上下文的父类取的类型，然后typeOf的泛型就是我们写的</p><p>主控制器，那么内控制器就是等于我们取到的这个控制器，</p><p>头部固定问题就完美解决了</p><p>只要能取到，就算不用也是可以的</p><p>当然也可以直接使用:</p><p>@override</p><p>Widget build(BuildContext context) {</p><p>  _actions(widget.type);</p><p>  return PrimaryScrollController(controller: _innerC, child: new SingleChildScrollView(</p><pre><code>child: new Column(children: widget.widgets),</code></pre><p>  ));</p><p>}</p><p>这个都无所谓的。</p><p>但是我们发现两个控制器开始分开的，打印外控制器最大滚动还是300左右，</p><p>但是打印内控制器最大滚动位置是body的全部，2k左右，</p><p>那么我这个需求还有没有解决方案了？</p><p>当然是有的：</p><p>点击锚点跳转解决方案</p><p>第一步（直接使用外部控制器jumpTo）</p><p>@override</p><p>void initState() {</p><p>  super.initState();</p><p>  tabs = [‘商品’, ‘评价’, ‘详情’];</p><p>  _tabC = new TabController(length: tabs.length, vsync: this);</p><p>  _tabC.addListener(() =&gt; _onTabChanged());</p><p>}</p><p>_onTabChanged() {</p><p>  setState(() {</p><pre><code>switch (_tabC.index) {  case 0:    _ctl.jumpTo(0.1);    type = 0;    break;  case 1:    type = 1;    break;  case 2:    type = 2;    break;}</code></pre><p>  });</p><p>}</p><p>_tabC就是外部控制器，在初始化的时候监听tabbar是否被点击，</p><p>如果被点击的话直接写个tab改变的方法，tabbar的三个Bar分别是0，1，2，</p><p>所以我们也接收一个0，1，2，来处理，</p><p>然后直接给它jumpTo跳转，然后那个type就是我们的BodyView接收的</p><p>具体有什么用呢？</p><p>class BodyView extends StatefulWidget {</p><p>…</p><p>}</p><p>class _BodyViewState extends State<BodyView> {</p><p>  …</p><p>  _actions(int type) {</p><pre><code>setState(() {  _binding.addPostFrameCallback((callback) {    switch (type) {      case 1:        _innerC.jumpTo(1000);        print(_innerC.position.maxScrollExtent);        break;      case 2:        _innerC.jumpTo(2000);        break;    }  });});</code></pre><p>  }</p><p>  @override</p><p>  void initState() {</p><pre><code>...</code></pre><p>  }</p><p>  @override</p><p>  Widget build(BuildContext context) {</p><pre><code>_actions(widget.type);...</code></pre><p>  }</p><p>}</p><p>我们可以看到，这边也是监听接收的int类型，</p><p>如果监听到传过来的是0的话就调到我们的顶部，（heard控制器控制）</p><p>如果监听到传过来的是1的话就调到我们想要到的评论的位置。</p><p>如果监听到传过来的是2的话就跳到我们想要的商品详情的位置。</p><p>Position为null的解决方案</p><p>当我以为这样就没问题的时候发现又出现了一个错误，</p><p>真的是坑一个接着一个啊，</p><p>解决方案为：</p><p>调用第一帧绘制完毕之后再执行jumpTo</p><p>具体：</p><p>class BodyView extends StatefulWidget {</p><pre><code>...</code></pre><p>}</p><p>class _BodyViewState extends State<BodyView> {</p><p>  WidgetsBinding _binding = WidgetsBinding.instance;</p><p>  _actions(int type) {</p><pre><code>setState(() {  _binding.addPostFrameCallback((callback) {    ...});</code></pre><p>  }</p><p>}</p><p>我们写了一个小部件绑定的东西，让他能监听第一帧是否绘制完毕，</p><p>绘制完毕之后再执行jumpTo</p><p>这样就只差获取评论和商品详情的组件位置然后传入具体的Offset就完美执行了，</p><p>因为时间关系就到这了，任何问题可以加我微信：zonggeyl_com来问我。</p><p>接下来我把我这个文件的整体代码发出来，能看的懂的可以看一下，</p><p>直接运行肯定是不能运行的，因为里面调用的资源文件和封装你们都没有，</p><p>要懂查看和使用，</p><p>import ‘package:flutter/material.dart’;</p><p>class SliverAppBarPage extends StatefulWidget {</p><p>  SliverAppBarPage({</p><pre><code>this.widgets,this.headerView,this.height = 200,this.background,</code></pre><p>  });</p><p>  final List<Widget> widgets;</p><p>  final Widget headerView;</p><p>  final Widget background;</p><p>  final double height;</p><p>  @override</p><p>  State<StatefulWidget> createState() =&gt; new SliverAppBarPageState();</p><p>}</p><p>class SliverAppBarPageState extends State<SliverAppBarPage></p><pre><code>with TickerProviderStateMixin {</code></pre><p>  TabController _tabC;</p><p>  ScrollController _ctl = new ScrollController();</p><p>  int type;</p><p>  List tabs;</p><p>  WidgetsBinding _binding = WidgetsBinding.instance;</p><p>  @override</p><p>  void initState() {</p><pre><code>super.initState();tabs = [&apos;商品&apos;, &apos;评价&apos;, &apos;详情&apos;];_tabC = new TabController(length: tabs.length, vsync: this);_tabC.addListener(() =&gt; _onTabChanged());</code></pre><p>  }</p><p>  _onTabChanged() {</p><pre><code>setState(() {  switch (_tabC.index) {    case 0:      _binding.addPostFrameCallback((callback) =&gt; _ctl.jumpTo(0.1));      type = 0;      break;    case 1:      type = 1;      break;    case 2:      type = 2;      break;  }});</code></pre><p>  }</p><p>  List<Widget> _sliverBuilder(BuildContext context, bool innerBoxIsScrolled) {</p><pre><code>return &lt;Widget&gt;[  new SliverAppBar(    centerTitle: true,    expandedHeight: widget.height,    floating: false,    pinned: true,    backgroundColor: Colors.white,    elevation: 0,    brightness: Brightness.light,    leading: new InkWell(      child: innerBoxIsScrolled          ? new Container(              width: 15,              height: 20.0,              child: new Image.asset(&apos;assets/images/nav_ic_back.webp&apos;,                  color: innerBoxIsScrolled ? mainFontColor : Colors.white),            )          : new Container(              padding: EdgeInsets.only(left: 10.0),              alignment: Alignment.center,              child: new Container(                height: 35,                width: 35,                decoration: BoxDecoration(                    color: Color.fromRGBO(0, 0, 0, 0.2),                    borderRadius: BorderRadius.circular(17.5)),                child: new Image.asset(&apos;assets/images/nav_ic_back.webp&apos;,                    color:                        innerBoxIsScrolled ? mainFontColor : Colors.white),              ),            ),      onTap: () =&gt; Navigator.pop(context),    ),    title: new Text(      innerBoxIsScrolled ? &apos;商品详情&apos; : &apos;&apos;,      style: TextStyle(color: Color(0xff000000), fontSize: 19.0),    ),    bottom: innerBoxIsScrolled        ? new PreferredSize(            child: new Container(              padding: EdgeInsets.symmetric(horizontal: 80.0),              child: new TabBar(                  controller: _tabC,                  indicatorSize: TabBarIndicatorSize.label,                  labelColor: Color(0xffFF4F73),                  indicatorColor: Color(0xffFF4F73),                  unselectedLabelColor: Color(0xff000000),                  labelStyle: new TextStyle(fontSize: 14.0),                  labelPadding: EdgeInsets.only(bottom: 20),                  indicatorPadding: EdgeInsets.only(                      bottom: 15, top: 10, left: 5, right: 5.0),                  tabs: tabs.map((item) =&gt; new Text(&apos;$item&apos;)).toList()),            ),            preferredSize: Size(30, 50))        : null,    actions: &lt;Widget&gt;[],    flexibleSpace: new FlexibleSpaceBar(        centerTitle: true,        title: widget.headerView,        background: widget.background),  ),];</code></pre><p>  }</p><p>  @override</p><p>  Widget build(BuildContext context) {</p><pre><code>return new Scaffold(  body: new NestedScrollView(      controller: _ctl,      headerSliverBuilder: _sliverBuilder,</code></pre><p>//        body: new SingleChildScrollView(</p><p>//          controller: _ctl,</p><p>//            child: new Column(children: widget.widgets)),</p><p>//      ),</p><pre><code>      body: new BodyView(widget.widgets, type)),);</code></pre><p>  }</p><p>}</p><p>class BodyView extends StatefulWidget {</p><p>  final List<Widget> widgets;</p><p>  final int type;</p><p>  BodyView(this.widgets, this.type);</p><p>  @override</p><p>  _BodyViewState createState() =&gt; _BodyViewState();</p><p>}</p><p>class _BodyViewState extends State<BodyView> {</p><p>  Type typeOf<T>() =&gt; T;</p><p>  ScrollController _innerC;</p><p>  WidgetsBinding _binding = WidgetsBinding.instance;</p><p>  _actions(int type) {</p><pre><code>setState(() {  _binding.addPostFrameCallback((callback) {    switch (type) {      case 1:        _innerC.jumpTo(1000);        print(_innerC.position.maxScrollExtent);        break;      case 2:        _innerC.jumpTo(2000);        break;    }  });});</code></pre><p>  }</p><p>  @override</p><p>  void initState() {</p><pre><code>super.initState();PrimaryScrollController primaryScrollController =    context.ancestorWidgetOfExactType(typeOf&lt;PrimaryScrollController&gt;());_innerC = primaryScrollController.controller;</code></pre><p>  }</p><p>  @override</p><p>  Widget build(BuildContext context) {</p><pre><code>_actions(widget.type);return new SingleChildScrollView(  child: new Column(children: widget.widgets),);</code></pre><p>  }</p><p>}</p><p>关注公众号“Flutter前线”，各种Flutter项目实战经验技巧，干活知识，Flutter面试题答案，等你来领取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【本文待优化】&lt;/p&gt;
&lt;p&gt;做企业项目遇到了个坑，&lt;/p&gt;
&lt;p&gt;那这个坑是怎么遇到的呢，刚开始是已经做好了商品详情页：&lt;/p&gt;
&lt;p&gt;详情页面用的是NestedScrollView组件，轮播图那一块用的是SliverAppBar，&lt;/p&gt;
&lt;p&gt;也就是写在NestedS
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flutter实现文件读写篇</title>
    <link href="http://q1.flutterj.com/2020/04/18/flutter%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%AF%87/"/>
    <id>http://q1.flutterj.com/2020/04/18/flutter%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%AF%87/</id>
    <published>2020-04-18T07:25:05.000Z</published>
    <updated>2020-04-18T07:36:25.180Z</updated>
    
    <content type="html"><![CDATA[<p>flutter文件读写可以对磁盘文件进行操作，实现某些业务场景，那么我们开始来讲下这个文件读写操作。</p><h1 id="库插件-package"><a href="#库插件-package" class="headerlink" title="库插件(package)"></a>库插件(package)</h1><p><a href="https://api.flutter.dev/flutter/dart-io/dart-io-library.html" target="_blank" rel="noopener">dart:io</a>（用于数据处理）<br><a href="https://pub.flutter-io.cn/packages/path_provider" target="_blank" rel="noopener">path_provider</a> （用于获取路劲）</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>1.获取正确的本地路径<br>2.创建指向文件位置的引用<br>3.写入数据到文件内<br>4.从文件读取数据</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-获取正确的本地路径"><a href="#1-获取正确的本地路径" class="headerlink" title="1.获取正确的本地路径"></a>1.获取正确的本地路径</h2><p>我们获取路劲用的是这个插件<br><a href="https://pub.flutter-io.cn/packages/path_provider" target="_blank" rel="noopener">path_provider</a><br>可以看到里面提供了两个获取路劲的方式</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Directory tempDir = await getTemporaryDirectory()<span class="comment">;</span></span><br><span class="line">String tempPath = tempDir.path<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Directory appDocDir = await getApplicationDocumentsDirectory()<span class="comment">;</span></span><br><span class="line">String appDocPath = appDocDir.path<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>getTemporaryDirectory：【临时文件夹】<br>也就是系统可以随时清空的临时缓存文件夹，在IOS中对应<a href="https://developer.apple.com/documentation/foundation/1409211-nstemporarydirectory" target="_blank" rel="noopener">NSTemporaryDirectory</a>在安卓中对应<a href="https://developer.android.google.cn/reference/android/content/Context#getCacheDir()" target="_blank" rel="noopener">getCacheDir() </a></p><p>我们来将信息储存在临时文件夹中，首先我们创建一个Storage类里面开始写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> _localPath <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> _path = <span class="keyword">await</span> getTemporaryDirectory();</span><br><span class="line">    <span class="keyword">return</span> _path.path;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建指向文件位置的引用"><a href="#2-创建指向文件位置的引用" class="headerlink" title="2.创建指向文件位置的引用"></a>2.创建指向文件位置的引用</h2><p>确定文件储存位置之后，导入我们的io库，使用包里面的File类做泛型，然后获取路劲并且指向我们的文件名</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;File&gt; <span class="keyword">get</span> _localFile <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> path = <span class="keyword">await</span> _localPath;</span><br><span class="line">  <span class="keyword">return</span> File(<span class="string">'<span class="subst">$path</span>/counter.txt'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-写入数据到文件内"><a href="#3-写入数据到文件内" class="headerlink" title="3.写入数据到文件内"></a>3.写入数据到文件内</h2><p>现在有了可以使用的File，直接就可以来读写数据了，因为我们使用了计数器，所以只需将证书储存为字符串格式，<br>使用“$counter”即可（解析成整数方法在下一步）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;File&gt; writeCounter(counter) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> file = <span class="keyword">await</span> _localFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file.writeAsString(<span class="string">'<span class="subst">$counter</span>'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="4-从文件读取数据"><a href="#4-从文件读取数据" class="headerlink" title="4.从文件读取数据"></a>4.从文件读取数据</h2><p>现在可以直接用file类来读取文件数据，然后用int的自带解析方法来解析我们读取的String</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Future&lt;<span class="keyword">int</span>&gt; <span class="title">readCounter</span>(<span class="params"></span>) <span class="keyword">async</span></span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      final file = <span class="keyword">await</span> _localFile;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> contents = <span class="keyword">await</span> file.readAsString();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">int</span>.parse(contents);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:path_provider/path_provider.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> _localPath <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> _path = <span class="keyword">await</span> getTemporaryDirectory();</span><br><span class="line">    <span class="keyword">return</span> _path.path;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;File&gt; <span class="keyword">get</span> _localFile <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> path = <span class="keyword">await</span> _localPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> File(<span class="string">'<span class="subst">$path</span>/counter.txt'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; readCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> file = <span class="keyword">await</span> _localFile;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> contents = <span class="keyword">await</span> file.readAsString();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">int</span>.parse(contents);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;File&gt; writeCounter(counter) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> file = <span class="keyword">await</span> _localFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file.writeAsString(<span class="string">'<span class="subst">$counter</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Storage storage;</span><br><span class="line"></span><br><span class="line">  OnePage(&#123;<span class="keyword">this</span>.storage&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _OnePageState createState() =&gt; _OnePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_OnePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">OnePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    widget.storage.readCounter().then((value) &#123;</span><br><span class="line">      setState(() =&gt; _counter = value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;File&gt; _incrementCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() =&gt; _counter++);</span><br><span class="line">    <span class="keyword">return</span> widget.storage.writeCounter(_counter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;File&gt; _incrementCounterj() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() =&gt; _counter--);</span><br><span class="line">    <span class="keyword">return</span> widget.storage.writeCounter(_counter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">'<span class="subst">$_counter</span>'</span>,</span><br><span class="line">          style: Theme.of(context).textTheme.display1,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: () =&gt; _incrementCounter(),</span><br><span class="line">            child: <span class="keyword">new</span> Icon(Icons.add),</span><br><span class="line">          ),</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: () =&gt; _incrementCounterj(),</span><br><span class="line">            child: <span class="keyword">new</span> Icon(Icons.title),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;flutter文件读写可以对磁盘文件进行操作，实现某些业务场景，那么我们开始来讲下这个文件读写操作。&lt;/p&gt;
&lt;h1 id=&quot;库插件-package&quot;&gt;&lt;a href=&quot;#库插件-package&quot; class=&quot;headerlink&quot; title=&quot;库插件(package)
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flutter登陆TextField的焦点及动作</title>
    <link href="http://q1.flutterj.com/2020/04/18/flutter%E7%99%BB%E9%99%86TextField%E7%9A%84%E7%84%A6%E7%82%B9%E5%8F%8A%E5%8A%A8%E4%BD%9C/"/>
    <id>http://q1.flutterj.com/2020/04/18/flutter%E7%99%BB%E9%99%86TextField%E7%9A%84%E7%84%A6%E7%82%B9%E5%8F%8A%E5%8A%A8%E4%BD%9C/</id>
    <published>2020-04-18T07:18:23.000Z</published>
    <updated>2020-04-18T07:23:31.349Z</updated>
    
    <content type="html"><![CDATA[<p> 视频链接：<a href="https://www.bilibili.com/video/av44936399/?p=2" target="_blank" rel="noopener"><strong>https://www.bilibili.com/video/av44936399/?p=2</strong></a></p><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>在多个TextField中获取焦点，并通过键盘跳到下一个焦点的demo，主要讲解获取焦点，</p><h1 id="第一个文件，main-dart代码"><a href="#第一个文件，main-dart代码" class="headerlink" title="第一个文件，main.dart代码"></a>第一个文件，main.dart代码</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'textfields_focus_demo</span>.dart'; <span class="comment">// 导包</span></span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Widget</span> child;</span><br><span class="line"></span><br><span class="line">  <span class="type">MyApp</span>(&#123;<span class="type">Key</span> key, <span class="keyword">this</span>.child&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Container</span>(</span><br><span class="line">      child: <span class="type">MaterialApp</span>(</span><br><span class="line">        title: <span class="symbol">'Flutter</span> demo',</span><br><span class="line">        theme: <span class="type">ThemeData</span>(</span><br><span class="line">          primarySwatch: <span class="type">Colors</span>.blue,</span><br><span class="line">          primaryColor: <span class="type">Colors</span>.blue,</span><br><span class="line">        ),</span><br><span class="line">        home: <span class="type">TextFieldDemo</span>(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导包之后，定义username和password的控制器和焦点，</p><p>然后给他初始化，初始化完之后就开始调用了，</p><h1 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h1><p>使用FocusNode获取当前textField焦点<br>在TextNode的textInputAction属性中选择键盘action（next/down）<br>对于最后一个之前的TextField：在onSubmitted属性中解除当前focus状态<br>再聚焦下一个FocusNode:FocusScope.of(context).requestFocus( nextFocusNode );<br>对于最后一个TextField,直接解除focus并提交表单</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">textfields_focus_demo.dart</span> <span class="string"></span></span><br><span class="line"><span class="attr">import</span> <span class="string">'package:flutter/material.dart';</span></span><br><span class="line"></span><br><span class="line"><span class="attr">class</span> <span class="string">TextFieldDemo extends StatefulWidget &#123;</span></span><br><span class="line">  <span class="attr">_TextFieldDemoState</span> <span class="string">createState() =&gt; _TextFieldDemoState();</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">class</span> <span class="string">_TextFieldDemoState extends State&lt;TextFieldDemo&gt; &#123;</span></span><br><span class="line">  <span class="attr">FocusNode</span> <span class="string">_namefocusNode, _pwfocusNode;</span></span><br><span class="line">  <span class="attr">TextEditingController</span> <span class="string">_nameController, _pwController;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">@override</span></span><br><span class="line">  <span class="attr">void</span> <span class="string">initState() &#123;</span></span><br><span class="line">    <span class="attr">super.initState();</span></span><br><span class="line">    <span class="attr">_nameController</span> = <span class="string">TextEditingController();</span></span><br><span class="line">    <span class="attr">_pwController</span> = <span class="string">TextEditingController();</span></span><br><span class="line">    <span class="attr">_namefocusNode</span> = <span class="string">FocusNode();</span></span><br><span class="line">    <span class="attr">_pwfocusNode</span> = <span class="string">FocusNode();</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">@override</span></span><br><span class="line">  <span class="attr">Widget</span> <span class="string">build(BuildContext context) &#123;</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">Scaffold(</span></span><br><span class="line">      <span class="attr">body</span>: <span class="string">SafeArea(//安全区，主要兼容屏幕</span></span><br><span class="line">        <span class="attr">child</span>: <span class="string">ListView(</span></span><br><span class="line">          <span class="attr">children</span>: <span class="string">&lt;Widget&gt;[</span></span><br><span class="line">            <span class="meta">SizedBox(height</span>: <span class="string">80.0),// 空出80高度</span></span><br><span class="line">            <span class="attr">Center(//居中</span></span><br><span class="line">              <span class="attr">child</span>: <span class="string">Text(</span></span><br><span class="line">                <span class="attr">'Login',</span></span><br><span class="line">                <span class="attr">style</span>: <span class="string">TextStyle(fontSize: 30.0),</span></span><br><span class="line">              <span class="attr">),</span></span><br><span class="line">            <span class="attr">),</span></span><br><span class="line">            <span class="meta">SizedBox(height</span>: <span class="string">80.0),</span></span><br><span class="line">            <span class="attr">Padding(</span></span><br><span class="line">              <span class="attr">padding</span>: <span class="string">EdgeInsets.all(16.0),</span></span><br><span class="line">              <span class="attr">child</span>: <span class="string">Material(</span></span><br><span class="line">                <span class="attr">borderRadius</span>: <span class="string">BorderRadius.circular(10.0),</span></span><br><span class="line">                <span class="attr">child</span>: <span class="string">TextField(</span></span><br><span class="line">                  <span class="attr">focusNode</span>: <span class="string">_namefocusNode,</span></span><br><span class="line">                  <span class="attr">controller</span>: <span class="string">_nameController,</span></span><br><span class="line">                  <span class="attr">obscureText</span>: <span class="string">false,</span></span><br><span class="line">                  <span class="attr">textInputAction</span>: <span class="string">TextInputAction.next,</span></span><br><span class="line">                  <span class="attr">onSubmitted</span>: <span class="string">(input) &#123;</span></span><br><span class="line">                    <span class="attr">_namefocusNode.unfocus();</span></span><br><span class="line">                    <span class="attr">FocusScope.of(context).requestFocus(_pwfocusNode);</span></span><br><span class="line">                  <span class="attr">&#125;,</span></span><br><span class="line">                  <span class="attr">decoration</span>: <span class="string">InputDecoration(</span></span><br><span class="line">                    <span class="attr">labelText</span>: <span class="string">'name',</span></span><br><span class="line">                  <span class="attr">),</span></span><br><span class="line">                <span class="attr">),</span></span><br><span class="line">              <span class="attr">),</span></span><br><span class="line">            <span class="attr">),</span></span><br><span class="line">            <span class="attr">Padding(</span></span><br><span class="line">              <span class="attr">padding</span>: <span class="string">EdgeInsets.all(16.0),</span></span><br><span class="line">              <span class="attr">child</span>: <span class="string">Material(</span></span><br><span class="line">                <span class="attr">borderRadius</span>: <span class="string">BorderRadius.circular(10.0),</span></span><br><span class="line">                <span class="attr">child</span>: <span class="string">TextField(</span></span><br><span class="line">                  <span class="attr">focusNode</span>: <span class="string">_pwfocusNode,</span></span><br><span class="line">                  <span class="attr">controller</span>: <span class="string">_pwController,</span></span><br><span class="line">                  <span class="attr">obscureText</span>: <span class="string">true,</span></span><br><span class="line">                  <span class="attr">textInputAction</span>: <span class="string">TextInputAction.done,</span></span><br><span class="line">                  <span class="attr">onSubmitted</span>: <span class="string">(input) &#123;</span></span><br><span class="line">                    <span class="attr">_pwfocusNode.unfocus();</span></span><br><span class="line">                  <span class="attr">&#125;,</span></span><br><span class="line">                  <span class="attr">decoration</span>: <span class="string">InputDecoration(</span></span><br><span class="line">                    <span class="attr">labelText</span>: <span class="string">'password'</span></span><br><span class="line">                  <span class="attr">),</span></span><br><span class="line">                <span class="attr">),</span></span><br><span class="line">              <span class="attr">),</span></span><br><span class="line">            <span class="attr">),</span></span><br><span class="line">            <span class="attr">ButtonBar(</span></span><br><span class="line">              <span class="attr">children</span>: <span class="string">&lt;Widget&gt;[</span></span><br><span class="line">                <span class="attr">RaisedButton(</span></span><br><span class="line">                  <span class="attr">onPressed</span>: <span class="string">()&#123;&#125;,</span></span><br><span class="line">                  <span class="attr">child</span>: <span class="string">Text('login'),</span></span><br><span class="line">                <span class="attr">),</span></span><br><span class="line">              <span class="attr">],</span></span><br><span class="line">            <span class="attr">)</span></span><br><span class="line">          <span class="attr">],</span></span><br><span class="line">        <span class="attr">),</span></span><br><span class="line">      <span class="attr">),</span></span><br><span class="line">    <span class="attr">);</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h1><p><img src="http://upload-images.jianshu.io/upload_images/14347887-7e4ca6a91ec952e0?imageMogr2/auto-orient/strip" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 视频链接：&lt;a href=&quot;https://www.bilibili.com/video/av44936399/?p=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;https://www.bilibili.com/video/av44
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flutter单屏启动动画介绍页面制作</title>
    <link href="http://q1.flutterj.com/2020/04/18/Flutter%E5%8D%95%E5%B1%8F%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB%E4%BB%8B%E7%BB%8D%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/"/>
    <id>http://q1.flutterj.com/2020/04/18/Flutter%E5%8D%95%E5%B1%8F%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB%E4%BB%8B%E7%BB%8D%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</id>
    <published>2020-04-18T07:00:38.000Z</published>
    <updated>2020-04-18T07:16:59.063Z</updated>
    
    <content type="html"><![CDATA[<p>视频链接：<a href="https://www.bilibili.com/video/av46276578/?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/av46276578/?p=2</a><br> 这节课主要讲的是一个单屏的启动动画，其实很简单的，之前以为大家都会就没讲，然后有位小伙伴私聊我，说让我讲一下，因为很多软件用的都是单屏或者单屏下面还有跳过按钮倒计时数字啥的，这个大家随机应变应该会感觉很简单的，看完我的这些教程的朋友，</p><pre><code>那我就不说那么多了直接开始文字教程。</code></pre><p>main等东西就不说了，home里面写了个SingleScreen()然后我们就创建文件之后导入了，SingleScreen是一个动态的widget类，我们在里面就写个充满屏幕的图片就行了，用的图片获取方式是network，</p><p>然后我们写了个初始化，里面有个倒计时，</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initState</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    conutDown();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后倒计时里面我们写了个延时的东西，里面的参数是转到新页面的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void conut<span class="constructor">Down()</span> &#123;</span><br><span class="line">    var _duration = <span class="constructor">Duration(<span class="params">seconds</span>: 3)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Future</span>.</span></span>delayed(_duration, newPage);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之后新页面的方法写的就是给他替换路由名字为/newPage</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void <span class="keyword">new</span><span class="constructor">Page()</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Navigator</span>.</span></span><span class="keyword">of</span>(context).push<span class="constructor">ReplacementNamed('<span class="operator">/</span>NewPage')</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之后我们的main.dart的materialApp就接收一个新的路由并写东西，就写了给他跳转到新页面</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes: &lt;String, WidgetBuilder&gt; &#123;</span><br><span class="line">        <span class="string">'/NewPage'</span> : <span class="function"><span class="params">(context)</span> =&gt;</span> NewPage()</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>然后新页面就很简单了，就是我们的想跳转到的页面了，</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text('单屏介绍'),</span><br><span class="line">        centerTitle: true,</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          '新页面',</span><br><span class="line">          style: Theme.of(<span class="name">context</span>).textTheme.display2,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>大概就是介个样子啦。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>main.dart</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'single_screen</span>.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'new_page</span>.dart';</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      title: <span class="symbol">'SingleScree</span>n',</span><br><span class="line">      theme: <span class="type">ThemeData</span>(</span><br><span class="line">        primaryColor: <span class="type">Colors</span>.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="type">SingleScreen</span>(),</span><br><span class="line">      routes: &lt;<span class="type">String</span>, <span class="type">WidgetBuilder</span>&gt; &#123;</span><br><span class="line">        '/<span class="type">NewPage</span>' : (context) =&gt; <span class="type">NewPage</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>single_screen.dart</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/widgets.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'dart</span>:async';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SingleScreenState createState() =&gt; _SingleScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SingleScreenState</span> <span class="keyword">extends</span> <span class="title">State&lt;SingleScreen&gt;</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Container</span>(</span><br><span class="line">      color: <span class="type">Colors</span>.white,</span><br><span class="line">      child: <span class="type">Image</span>.network(</span><br><span class="line">        <span class="symbol">'http</span>:<span class="comment">//img.wxcha.com/file/201606/30/1978c43117.jpg',</span></span><br><span class="line">        fit: <span class="type">BoxFit</span>.cover,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void initState() &#123; </span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    conutDown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void conutDown() &#123;</span><br><span class="line">    <span class="keyword">var</span> _duration = <span class="type">Duration</span>(seconds: <span class="number">3</span>);</span><br><span class="line">    <span class="type">Future</span>.delayed(_duration, newPage);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void newPage() &#123;</span><br><span class="line">    <span class="type">Navigator</span>.of(context).pushReplacementNamed('/<span class="type">NewPage</span>');</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new_page.dart</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Scaffold</span>(</span><br><span class="line">      appBar: <span class="type">AppBar</span>(</span><br><span class="line">        title: <span class="type">Text</span>('单屏介绍'),</span><br><span class="line">        centerTitle: <span class="literal">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="type">Center</span>(</span><br><span class="line">        child: <span class="type">Text</span>(</span><br><span class="line">          '新页面',</span><br><span class="line">          style: <span class="type">Theme</span>.of(context).textTheme.display2,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h1><p><img src="http://upload-images.jianshu.io/upload_images/14347887-cb96fed106fb127a.gif?imageMogr2/auto-orient/strip" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频链接：&lt;a href=&quot;https://www.bilibili.com/video/av46276578/?p=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av46276578/?p
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
